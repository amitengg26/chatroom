"use strict";var myHostname=window.location.hostname;myHostname||(myHostname="localhost"),log("Hostname: "+myHostname);var connection=null,clientID=0,mediaConstraints={audio:!0,video:{aspectRatio:{ideal:1.333333}}},myUsername=null,targetUsername=null,myPeerConnection=null,transceiver=null,webcamStream=null;function log(e){var n=new Date;console.log("["+n.toLocaleTimeString()+"] "+e)}function log_error(e){var n=new Date;console.trace("["+n.toLocaleTimeString()+"] "+e)}function sendToServer(e){var n=JSON.stringify(e);log("Sending '"+e.type+"' message: "+n),connection.send(n)}function setUsername(){sendToServer({name:myUsername=document.getElementById("name").value,date:Date.now(),id:clientID,type:"username"})}function connect(){var e;document.location.protocol,e="wss://1de78e25.ngrok.io",console.log("serverUrl",e),log(`Connecting to server: ${e}`),(connection=new WebSocket(e,"json")).onopen=function(e){document.getElementById("text").disabled=!1,document.getElementById("send").disabled=!1},connection.onerror=function(e){console.dir(e)},connection.onmessage=function(e){var n=document.querySelector(".chatbox"),t="",a=JSON.parse(e.data);log("Message received: "),console.dir(a);var o=new Date(a.date).toLocaleTimeString();switch(a.type){case"id":clientID=a.id,setUsername();break;case"username":t="<b>User <em>"+a.name+"</em> signed in at "+o+"</b><br>";break;case"message":t="("+o+") <b>"+a.name+"</b>: "+a.text+"<br>";break;case"rejectusername":t="<b>Your username has been set to <em>"+(myUsername=a.name)+"</em> because the name you chose is in use.</b><br>";break;case"userlist":handleUserlistMsg(a);break;case"video-offer":handleVideoOfferMsg(a);break;case"video-answer":handleVideoAnswerMsg(a);break;case"new-ice-candidate":handleNewICECandidateMsg(a);break;case"hang-up":handleHangUpMsg(a);break;default:log_error("Unknown message received:"),log_error(a)}t.length&&(n.innerHTML+=t,n.scrollTop=n.scrollHeight-n.clientHeight)}}function handleSendButton(){sendToServer({text:document.getElementById("text").value,type:"message",id:clientID,date:Date.now()}),document.getElementById("text").value=""}function handleKey(e){13!==e.keyCode&&14!==e.keyCode||document.getElementById("send").disabled||handleSendButton()}async function createPeerConnection(){log("Setting up a connection..."),(myPeerConnection=new RTCPeerConnection({iceServers:[{url:"turn:numb.viagenie.ca",credential:"muazkh",username:"webrtc@live.com"}]})).onicecandidate=handleICECandidateEvent,myPeerConnection.oniceconnectionstatechange=handleICEConnectionStateChangeEvent,myPeerConnection.onicegatheringstatechange=handleICEGatheringStateChangeEvent,myPeerConnection.onsignalingstatechange=handleSignalingStateChangeEvent,myPeerConnection.onnegotiationneeded=handleNegotiationNeededEvent,myPeerConnection.ontrack=handleTrackEvent}async function handleNegotiationNeededEvent(){log("*** Negotiation needed");try{log("---\x3e Creating offer");const e=await myPeerConnection.createOffer();if("stable"!=myPeerConnection.signalingState)return void log("     -- The connection isn't stable yet; postponing...");log("---\x3e Setting local description to the offer"),await myPeerConnection.setLocalDescription(e),log("---\x3e Sending the offer to the remote peer"),sendToServer({name:myUsername,target:targetUsername,type:"video-offer",sdp:myPeerConnection.localDescription})}catch(e){log("*** The following error occurred while handling the negotiationneeded event:"),reportError(e)}}function handleTrackEvent(e){log("*** Track event"),document.getElementById("received_video").srcObject=e.streams[0],document.getElementById("hangup-button").disabled=!1}function handleICECandidateEvent(e){e.candidate&&(log("*** Outgoing ICE candidate: "+e.candidate.candidate),sendToServer({type:"new-ice-candidate",target:targetUsername,candidate:e.candidate}))}function handleICEConnectionStateChangeEvent(e){switch(log("*** ICE connection state changed to "+myPeerConnection.iceConnectionState),myPeerConnection.iceConnectionState){case"closed":case"failed":case"disconnected":closeVideoCall()}}function handleSignalingStateChangeEvent(e){switch(log("*** WebRTC signaling state changed to: "+myPeerConnection.signalingState),myPeerConnection.signalingState){case"closed":closeVideoCall()}}function handleICEGatheringStateChangeEvent(e){log("*** ICE gathering state changed to: "+myPeerConnection.iceGatheringState)}function handleUserlistMsg(e){for(var n=document.querySelector(".userlistbox");n.firstChild;)n.removeChild(n.firstChild);e.users.forEach(function(e){var t=document.createElement("li");t.appendChild(document.createTextNode(e)),t.addEventListener("click",invite,!1),n.appendChild(t)})}function closeVideoCall(){var e=document.getElementById("local_video");log("Closing the call"),myPeerConnection&&(log("--\x3e Closing the peer connection"),myPeerConnection.ontrack=null,myPeerConnection.onnicecandidate=null,myPeerConnection.oniceconnectionstatechange=null,myPeerConnection.onsignalingstatechange=null,myPeerConnection.onicegatheringstatechange=null,myPeerConnection.onnotificationneeded=null,myPeerConnection.getTransceivers().forEach(e=>{e.stop()}),e.srcObject&&(e.pause(),e.srcObject.getTracks().forEach(e=>{e.stop()})),myPeerConnection.close(),myPeerConnection=null,webcamStream=null),document.getElementById("hangup-button").disabled=!0,targetUsername=null}function handleHangUpMsg(e){log("*** Received hang up notification from other peer"),closeVideoCall()}function hangUpCall(){closeVideoCall(),sendToServer({name:myUsername,target:targetUsername,type:"hang-up"})}async function invite(e){if(log("Starting to prepare an invitation"),myPeerConnection)alert("You can't start a call because you already have one open!");else{var n=e.target.textContent;if(n===myUsername)return void alert("I'm afraid I can't let you talk to yourself. That would be weird.");log("Inviting user "+(targetUsername=n)),log("Setting up connection to invite user: "+targetUsername),createPeerConnection();try{webcamStream=await navigator.mediaDevices.getUserMedia(mediaConstraints),document.getElementById("local_video").srcObject=webcamStream}catch(e){return void handleGetUserMediaError(e)}try{webcamStream.getTracks().forEach(transceiver=(e=>myPeerConnection.addTransceiver(e,{streams:[webcamStream]})))}catch(e){handleGetUserMediaError(e)}}}async function handleVideoOfferMsg(e){log("Received video chat offer from "+(targetUsername=e.name)),myPeerConnection||createPeerConnection();var n=new RTCSessionDescription(e.sdp);if("stable"!=myPeerConnection.signalingState)return log("  - But the signaling state isn't stable, so triggering rollback"),void await Promise.all([myPeerConnection.setLocalDescription({type:"rollback"}),myPeerConnection.setRemoteDescription(n)]);if(log("  - Setting remote description"),await myPeerConnection.setRemoteDescription(n),!webcamStream){try{webcamStream=await navigator.mediaDevices.getUserMedia(mediaConstraints)}catch(e){return void handleGetUserMediaError(e)}document.getElementById("local_video").srcObject=webcamStream;try{webcamStream.getTracks().forEach(transceiver=(e=>myPeerConnection.addTransceiver(e,{streams:[webcamStream]})))}catch(e){handleGetUserMediaError(e)}}log("---\x3e Creating and sending answer to caller"),await myPeerConnection.setLocalDescription(await myPeerConnection.createAnswer()),sendToServer({name:myUsername,target:targetUsername,type:"video-answer",sdp:myPeerConnection.localDescription})}async function handleVideoAnswerMsg(e){log("*** Call recipient has accepted our call");var n=new RTCSessionDescription(e.sdp);await myPeerConnection.setRemoteDescription(n).catch(reportError)}async function handleNewICECandidateMsg(e){var n=new RTCIceCandidate(e.candidate);log("*** Adding received ICE candidate: "+JSON.stringify(n));try{await myPeerConnection.addIceCandidate(n)}catch(e){reportError(e)}}function handleGetUserMediaError(e){switch(log_error(e),e.name){case"NotFoundError":alert("Unable to open your call because no camera and/or microphonewere found.");break;case"SecurityError":case"PermissionDeniedError":break;default:alert("Error opening your camera and/or microphone: "+e.message)}closeVideoCall()}function reportError(e){log_error(`Error ${e.name}: ${e.message}`)}
